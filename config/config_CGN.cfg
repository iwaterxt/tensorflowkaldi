[directories]
#directory where the training data will be retrieved
train_data = /esat/spchdisk/scratch/vrenkens/DNN_CGN/data/train
#directory where the testing data will be retrieved
test_data = /esat/spchdisk/scratch/vrenkens/DNN_CGN/data/test
#directory where the training features will be stored and retrieved
train_features = /esat/spchdisk/scratch/vrenkens/code/tfkaldi/features/CGN/train
#directory where the testing features will be stored and retrieved
test_features = /esat/spchdisk/scratch/vrenkens/code/tfkaldi/features/CGN/test
#directory where the language model will be retrieved
language = /esat/spchdisk/scratch/vrenkens/DNN_CGN/data/lang
#directory where the language model will be retrieved that is used to create the decoding graph
language_test = /esat/spchdisk/scratch/vrenkens/DNN_CGN/data/lang_test_bg
#directory where the all the data from this experiment will be stored (logs, models, ...)
expdir = /esat/spchdisk/scratch/vrenkens/code/tfkaldi/expdir/CGN
#path to the kaldi egs folder
kaldi_egs = /esat/spchdisk/scratch/vrenkens/kaldi/egs/wsj/s5


[general]
# number of jobs for kaldi
num_jobs = 8
#command used for kaldi
cmd = /esat/spchdisk/scratch/vrenkens/kaldi/egs/wsj/s5/utils/run.pl

[gmm-features]
#name of the features
name = 13mfcc
#feature type currently only fbank supported
type = mfcc
#length of the sliding window (seconds)
winlen = 0.025
#step of the sliding window (seconds)
winstep = 0.01
#number of fbank filters
nfilt = 26
#number of fft bins
nfft = 512
#low cuttof frequency
lowfreq = 0
#hight cutoff frequency, if -1 set to None
highfreq = -1
#premphesis
preemph = 0.97
#include energy in features
include_energy = True
#snip the edges for sliding window
snip_edges = True
#mfcc option: number of cepstrals
numcep = 13
#mfcc option: cepstral lifter (used to scale the mfccs)
ceplifter = 22
#apply mean and variance normalisation
apply_cmvn = True

[dnn-features]
#name of the features. If you want to use the GMM features, give it the same name
name = 40fbank
#feature type currently only fbank supported
type = fbank
#length of the sliding window (seconds)
winlen = 0.025
#step of the sliding window (seconds)
winstep = 0.01
#number of fbank filters
nfilt = 40
#number of fft bins
nfft = 512
#low cuttof frequency
lowfreq = 0
#hight cutoff frequency, if -1 set to None
highfreq = -1
#premphesis
preemph = 0.97
#include energy in features
include_energy = False
#snip the edges for sliding window
snip_edges = True
#mfcc option: number of cepstrals
numcep = 13
#mfcc option: cepstral lifter (used to scale the mfccs)
ceplifter = 22
#apply mean and variance normalisation
apply_cmvn = True

[mono_gmm]
#name of the monophone gmm
name = mono_gmm

[tri_gmm]
#name of the triphone gmm
name = tri_gmm
#triphone gmm parameters (kaldi)
num_leaves = 2000
tot_gauss = 10000

[lda_mllt]
#name of the LDA+MLLT GMM
name = lda_mllt_gmm
#LDA+MLLT gmm parameters (kaldi)
num_leaves = 2000
tot_gauss = 10000
#size of the left and right context window
context_width = 3

[nnet]
#name of the neural net
name = 2048_relu_drop
#name of the gmm model used for the alignments
gmm_name = lda_mllt_gmm
#size of the left and right context window
context_width = 5
#number of neurons in the hidden layers
num_hidden_units = 2048
#number of hidden layers
num_hidden_layers = 5
#nonlinearity used currently supported: relu, tanh, sigmoid
nonlin = relu
#if you want to do l2 normalization after every layer set to 'True' (recomended for unbounded units like relu)
l2_norm = True
#starting step, set to 'final' to skip nnet training
starting_step = 0
#if you're using monophone alignments, set to True
monophone = False
#if you want t use dropout set to a value smaller than 1
dropout = 0.5
#number of passes over the entire database
num_epochs = 15
#initial learning rate of the neural net
initial_learning_rate = 0.001
#exponential weight decay parameter
learning_rate_decay = 1
#size of the minibatch (#utterances)
batch_size = 128
#to limit memory ussage (specifically for GPU) the batch can be devided into even smaller batches. The gradient will be calculated by averaging the gradients of all these mini-batches. This value is the size of these mini-batches in number of frames. For optimal speed this value should be set as high as possible without exeeding the memory. To use the entire batch set to -1
numframes_per_batch = 2024
#size of the validation set, set to 0 if you don't want to use one
valid_batches = 2
#frequency of evaluating the validation set
valid_frequency = 10
#if you want to adapt the learning rate based on the validation set, set to True
valid_adapt = True
#number of times the learning will retry (with half learning rate) before terminating the training
valid_retries = 3
#how many steps are taken between two checkpoints
check_freq = 10
#you can visualise the progress of the neural net with tensorboard
visualise = True


